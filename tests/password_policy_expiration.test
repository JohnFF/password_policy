<?php
/**
 * @file
 * Tests for Password policy module expiration functionality.
 */

/**
 * Tests of password expiration.
 */
class PasswordPolicyExpirationTestCase extends DrupalWebTestCase {

  /**
   * Get info about the test case.
   */
  public static function getInfo() {
    return array(
      'name' => 'Password Expiration Test',
      'description' => t('Assure that password expiration rules work.'),
      'group' => 'Password Policy',
    );
  }

  /**
   * Set up the test.
   */
  public function setUp() {
    parent::setUp('password_policy');
  }

  /**
   * Test expiration constraint.
   */
  public function testExpirationConstraint() {
    // Create role to which the expiration policy will apply.
    // It is identical to the 'authenticated user' role in permissions. We
    // create this separate role because we would like the policy maker user to
    // be exempt from the expiration policy.
    $expiration_rid = $this->drupalCreateRole(array());

    // Log in policy maker.
    $policy_maker_user = $this->drupalCreateUser(array(
      'administer users',
      'administer permissions',
      'administer password policies',
      'unblock expired accounts',
    ));
    $this->drupalLogin($policy_maker_user);

    // Create a policy.
    $policy_name = $this->randomName();
    $edit = array(
      'name' => $policy_name,
      // Set expiration to 1 day.
      'expiration' => t('1'),
      // Apply the policy to the created role.
      "roles[$expiration_rid]" => $expiration_rid,
    );
    $this->drupalPost('admin/config/people/password_policy/add', $edit, t('Create'));
    $this->assertText('Policy ' . $policy_name . ' has been created.', 'Policy ' . $policy_name . ' has been created');

    // Verify that an expiration rule has been set in the policy.
    $pid = db_query('SELECT pid FROM {password_policy} WHERE name = :name', array(':name' => $policy_name))->fetchField();
    $expiration = db_query('SELECT expiration FROM {password_policy} WHERE pid = :pid', array(':pid' => $pid))->fetchField();
    $this->verbose('Expiration: ' . var_export($expiration, TRUE));
    $this->assertTrue($expiration == 1, t('Verified expiration set.'));

    // Enable newly created policy.
    $edit = array(
      "policies[$pid][enabled]" => $pid,
    );
    $this->drupalPost('admin/config/people/password_policy/list', $edit, t('Save changes'));
    $this->assertText(t('The changes have been saved.'), t('Form submitted successfully.'));
    $this->drupalGet('admin/config/people/password_policy');
    $enabled = db_query('SELECT enabled FROM {password_policy} WHERE pid = :pid', array(':pid' => $pid))->fetchField();
    $this->assertTrue($enabled == 1, t('Policy enabled.'));

    _password_policy_advance_test_clock((60 * 60 * 24) + 1);

    // Create an account to test with.
    $name1 = $this->randomName();
    $pass1 = 'aaaaaa';
    $edit = array(
      'name' => $name1,
      'mail' => $name1 . '@example.com',
      'pass[pass1]' => $pass1,
      'pass[pass2]' => $pass1,
    );
    $this->drupalPost('admin/people/create', $edit, 'Create new account');
    $uid = db_query('SELECT uid FROM {users} WHERE name = :name', array(':name' => $name1))->fetchField();
    $this->drupalGet('user/' . $uid . '/edit');
    $this->assertFieldChecked('edit-status-1', t('Account status is set to active.'));

    // Add user to role covered by expiration policy.
    user_multiple_role_edit(array($uid), 'add_role', $expiration_rid);

    // Log out and attempt to log in with the newly created test account.
    $this->drupalLogout();
    $edit = array(
      'name' => $name1,
      'pass' => $pass1,
    );
    $this->drupalPost('user/login', $edit, t('Log in'));
    $this->assertNoText(t('The username !name has not been activated or is blocked.', array('!name' => $name1)), t('Account not blocked from logging in.'));

    _password_policy_advance_test_clock((60 * 60 * 24) + 1);

    // Check that password should be expired, once cron runs.
    $created = db_query('SELECT created FROM {password_policy_history} WHERE uid = :uid', array(':uid' => '3'))->fetchField();
    $this->verbose('Created: ' . var_export($created, TRUE));
    $created = db_query('SELECT created FROM {password_policy} WHERE pid = :pid', array(':pid' => $pid))->fetchField();
    $this->verbose('$pid ' . $pid . ' created: ' . var_export($created, TRUE));

    // Run cron to trigger password expirations.
    $this->cronRun();

    // Check that test account has been blocked.
    $this->drupalLogin($policy_maker_user);
    $this->drupalGet('user/' . $uid . '/edit');
    $this->assertFieldChecked('edit-status-0', t('Account status is set to blocked.'));
    $this->drupalGet('admin/people/expired');
    $this->assertText('unblock', t('Account marked as blocked on Expired Accounts tab.'));

    // Log out and attempt to log in to the expired account again, to verify
    // block.
    $this->drupalLogout();
    $edit = array(
      'name' => $name1,
      'pass' => $pass1,
    );
    $this->drupalPost('user/login', $edit, t('Log in'));
    $this->assertText(t('The username !name has not been activated or is blocked.', array('!name' => $name1)), t('Account blocked from logging in.'));

    // Log in as policy making user to unblock the test user.
    $this->drupalLogin($policy_maker_user);
    $this->drupalPost('admin/people/expired/unblock/' . $uid, array(), t('Unblock user'));
    $this->assertText(t('The user !name has been unblocked.', array('!name' => $name1)), t('Account account has been unblocked.'));
    $this->drupalGet('admin/people/expired');
    $this->assertNoText('unblock', t('Account not marked as blocked on Expired Accounts tab.'));

    // Log out and attempt to log in the expired account again.
    $this->drupalLogout();
    $edit = array(
      'name' => $name1,
      'pass' => $pass1,
    );
    $this->drupalPost('user/login', $edit, t('Log in'));
    $this->assertNoText(t('The username !name has not been activated or is blocked.', array('!name' => $name1)), t('Account not blocked from logging in.'));
    $this->assertNoText(t('User login'), t('Check that login block is not shown, to verify user successfully logged in.'));
    $this->assertRaw(t('Your password has expired. You must change your password to proceed on the site.'), t('User forced to change password.'));

    // Change test user account's password.
    $pass2 = "bbbbbb";
    $edit = array(
      'current_pass' => $pass1,
      'pass[pass1]' => $pass2,
      'pass[pass2]' => $pass2,
    );
    $this->drupalPost('user/' . $uid . '/edit', $edit, t('Save'));
    $this->assertText(t('The changes have been saved.'), t("1st password change: !pass", array('!pass' => $pass2)));
    $this->drupalGet('node');

    // Delete test policy.
    $this->drupalLogout();
    $this->drupalLogin($policy_maker_user);
    $this->drupalPost('admin/config/people/password_policy/' . $pid . '/delete', array(), t('Delete'));
    $this->assertText('Password policy ' . $policy_name . ' was deleted.', 'Default password policy ' . $policy_name . 'was deleted');
  }

}
